package calculadora;

import java_cup.runtime.*;

parser code

{:
/** main de la clase */

public static void main (String argv[]) throws Exception

  {

    Parser analizador;

    /* Entrada por teclado */

    analizador = new Parser(new Scan(System.in));

    analizador.parse();

}

public void syntax_error(Symbol s) {

  report_error("Error de sintaxis linea " + s.left, null);

}

public void report_fatal_error(String message, Object info) {

  done_parsing();

  report_error("Error de sintaxis fatal : "

  + "No se puede recuperar del error y continuar con el analisis - "

  + message + " ",(Symbol)info);

  report_error("** Final del analisis.", null);

  System.exit(1);

}

:}

// terminales y no terminales

terminal SUMA, RESTA, DIVISION, MULTIPLICACION;

terminal RESULTADO, LPARENT, RPARENT, SIGNO;

terminal Integer ENTERO;

non terminal sesion, ecuacion;

non terminal Integer expresion;

// precedencia de operadores

precedence left RESTA, SUMA;

precedence left MULTIPLICACION, DIVISION;

precedence right SIGNO;

// Gram√°tica

start with sesion;

sesion ::= ecuacion | ecuacion sesion;

ecuacion ::= expresion:E1

            {: System.out.println (E1.intValue()); :} RESULTADO;

expresion ::= ENTERO:E1 {:RESULT = new Integer ( E1.intValue()) ; :}

           | expresion:E1 SUMA expresion:E2

            {:RESULT= new Integer( E1.intValue()+ E2.intValue()); :}

           | expresion:E1 RESTA expresion:E2

            {:RESULT= new Integer( E1.intValue()- E2.intValue()); :}

           | expresion:E1 MULTIPLICACION expresion:E2

            {:RESULT= new Integer( E1.intValue()*E2.intValue()); :}

           | expresion:E1 DIVISION expresion:E2

             {:RESULT= new Integer( E1.intValue()/E2.intValue()); :}

           | LPARENT expresion:E1 RPARENT

             {:RESULT= new Integer(E1.intValue()); :}


           | RESTA expresion:E1

             {: RESULT= new Integer( 0-E1.intValue()); :}

           %prec SIGNO ;



